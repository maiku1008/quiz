// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: quiz/quiz.proto

package quiz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuizClient is the client API for Quiz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizClient interface {
	// Get many questions
	GetQuestions(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (Quiz_GetQuestionsClient, error)
	// Give the answer
	GiveAnswers(ctx context.Context, opts ...grpc.CallOption) (Quiz_GiveAnswersClient, error)
	// Gets the score in percentage
	GetScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*ScoreResponse, error)
}

type quizClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizClient(cc grpc.ClientConnInterface) QuizClient {
	return &quizClient{cc}
}

func (c *quizClient) GetQuestions(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (Quiz_GetQuestionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Quiz_ServiceDesc.Streams[0], "/quiz.Quiz/GetQuestions", opts...)
	if err != nil {
		return nil, err
	}
	x := &quizGetQuestionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Quiz_GetQuestionsClient interface {
	Recv() (*QuestionResponse, error)
	grpc.ClientStream
}

type quizGetQuestionsClient struct {
	grpc.ClientStream
}

func (x *quizGetQuestionsClient) Recv() (*QuestionResponse, error) {
	m := new(QuestionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quizClient) GiveAnswers(ctx context.Context, opts ...grpc.CallOption) (Quiz_GiveAnswersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Quiz_ServiceDesc.Streams[1], "/quiz.Quiz/GiveAnswers", opts...)
	if err != nil {
		return nil, err
	}
	x := &quizGiveAnswersClient{stream}
	return x, nil
}

type Quiz_GiveAnswersClient interface {
	Send(*AnswerRequest) error
	CloseAndRecv() (*AnswerResponse, error)
	grpc.ClientStream
}

type quizGiveAnswersClient struct {
	grpc.ClientStream
}

func (x *quizGiveAnswersClient) Send(m *AnswerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *quizGiveAnswersClient) CloseAndRecv() (*AnswerResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AnswerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quizClient) GetScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*ScoreResponse, error) {
	out := new(ScoreResponse)
	err := c.cc.Invoke(ctx, "/quiz.Quiz/GetScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServer is the server API for Quiz service.
// All implementations must embed UnimplementedQuizServer
// for forward compatibility
type QuizServer interface {
	// Get many questions
	GetQuestions(*QuestionRequest, Quiz_GetQuestionsServer) error
	// Give the answer
	GiveAnswers(Quiz_GiveAnswersServer) error
	// Gets the score in percentage
	GetScore(context.Context, *ScoreRequest) (*ScoreResponse, error)
	mustEmbedUnimplementedQuizServer()
}

// UnimplementedQuizServer must be embedded to have forward compatible implementations.
type UnimplementedQuizServer struct {
}

func (UnimplementedQuizServer) GetQuestions(*QuestionRequest, Quiz_GetQuestionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedQuizServer) GiveAnswers(Quiz_GiveAnswersServer) error {
	return status.Errorf(codes.Unimplemented, "method GiveAnswers not implemented")
}
func (UnimplementedQuizServer) GetScore(context.Context, *ScoreRequest) (*ScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScore not implemented")
}
func (UnimplementedQuizServer) mustEmbedUnimplementedQuizServer() {}

// UnsafeQuizServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServer will
// result in compilation errors.
type UnsafeQuizServer interface {
	mustEmbedUnimplementedQuizServer()
}

func RegisterQuizServer(s grpc.ServiceRegistrar, srv QuizServer) {
	s.RegisterService(&Quiz_ServiceDesc, srv)
}

func _Quiz_GetQuestions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuestionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuizServer).GetQuestions(m, &quizGetQuestionsServer{stream})
}

type Quiz_GetQuestionsServer interface {
	Send(*QuestionResponse) error
	grpc.ServerStream
}

type quizGetQuestionsServer struct {
	grpc.ServerStream
}

func (x *quizGetQuestionsServer) Send(m *QuestionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Quiz_GiveAnswers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuizServer).GiveAnswers(&quizGiveAnswersServer{stream})
}

type Quiz_GiveAnswersServer interface {
	SendAndClose(*AnswerResponse) error
	Recv() (*AnswerRequest, error)
	grpc.ServerStream
}

type quizGiveAnswersServer struct {
	grpc.ServerStream
}

func (x *quizGiveAnswersServer) SendAndClose(m *AnswerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *quizGiveAnswersServer) Recv() (*AnswerRequest, error) {
	m := new(AnswerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Quiz_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quiz.Quiz/GetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).GetScore(ctx, req.(*ScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Quiz_ServiceDesc is the grpc.ServiceDesc for Quiz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quiz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.Quiz",
	HandlerType: (*QuizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScore",
			Handler:    _Quiz_GetScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetQuestions",
			Handler:       _Quiz_GetQuestions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GiveAnswers",
			Handler:       _Quiz_GiveAnswers_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "quiz/quiz.proto",
}
